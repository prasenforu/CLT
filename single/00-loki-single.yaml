apiVersion: v1
kind: ConfigMap
metadata:
  name: loki
data:
  loki.yaml: |-
    auth_enabled: false

    server:
      http_listen_port: 3100

    ingester:
      lifecycler:
        address: 127.0.0.1
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
        final_sleep: 0s
      chunk_idle_period: 3m
      chunk_block_size: 262144
      chunk_retain_period: 1m
      max_transfer_retries: 0

    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: aws
          schema: v11
          index:
            prefix: central_index_
            period: 24h

    storage_config:
      aws:
        s3: s3://admin:admin2675@172.31.14.138:9000/logging
        s3forcepathstyle: true
      boltdb_shipper:
        active_index_directory: /data/loki/boltdb-shipper-active
        cache_location: /data/loki/boltdb-shipper-cache
        shared_store: s3

    compactor:
      working_directory: /data/loki/boltdb-shipper-compactor
      shared_store: aws

    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h

    chunk_store_config:
      max_look_back_period: 0s

    table_manager:
      retention_deletes_enabled: false
      retention_period: 0s

    ruler:
      storage:
        type: local
        local:
          directory: /etc/loki/rules/fake
      rule_path: /temp/loki/rules-temp
      alertmanager_url: http://alertmanager:9093
      ring:
        kvstore:
          store: inmemory
      enable_api: true
      enable_alertmanager_v2: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-alert-config
data:
  rules.yml: |-
    "groups":
    - name: apps-rules
      rules:
      - alert: AppsErrorlog
        expr: sum by (pod,namespace,cluster)(count_over_time({cluster!="",pod!=""}|~ "[Ee]rror"[1m])) >= 1
        for: 1m
        labels:
          severity: warning
          category: logs
        annotations:
          title: "Application error in logs"
          messages: "Found error in Cluster ({{ $labels.cluster }}) POD ({{ $labels.pod }}) namespace ({{ $labels.namespace }}) is above 1 (current value: {{ $value }})"
      - alert: NoSuchHostError
        expr: sum by (pod,namespace,cluster)(count_over_time({cluster!="",pod!=""}|~ "no such host"[1m])) >= 1
        for: 1m
        labels:
          severity: warning
          category: logs
        annotations:
          title: "No Such Host Error"
          messages: "No Such Host error found in Cluster ({{ $labels.cluster }}) POD ({{ $labels.pod }}) namespace ({{ $labels.namespace }}) is above 1 (current value: {{ $value }})"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: loki
  name: loki
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: loki
  name: loki
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: loki
  serviceName: loki-headless
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
      - args:
        - -config.file=/etc/loki/loki.yaml
        image: docker.io/grafana/loki:2.2.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: http-metrics
            scheme: HTTP
          initialDelaySeconds: 45
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: loki
        ports:
        - containerPort: 3100
          name: http-metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: http-metrics
            scheme: HTTP
          initialDelaySeconds: 45
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        securityContext:
          procMount: Default
          readOnlyRootFilesystem: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/loki
          name: config
        - mountPath: /etc/loki/rules/fake
          name: alert
        - mountPath: /data
          name: storage
        - mountPath: /temp
          name: temp
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      serviceAccount: loki
      serviceAccountName: loki
      terminationGracePeriodSeconds: 30
      volumes:
      - name: config
        configMap:
          name: loki
      - name: alert
        configMap:
          name: loki-alert-config
      - emptyDir: {}
        name: storage
      - emptyDir: {}
        name: temp
  updateStrategy:
    type: RollingUpdate
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: loki
  name: loki
spec:
  ports:
  - name: http-metrics
    port: 3100
    protocol: TCP
    targetPort: http-metrics
  selector:
    app: loki
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: loki
  name: loki-headless
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 3100
    protocol: TCP
    targetPort: http-metrics
  selector:
    app: loki
  sessionAffinity: None
  type: ClusterIP
